import numpy as np
import ast


def generate_tweets_list(dataframe_single):
    '''
    Parameters
    ----------
    dataframe_single : dataframe 
        It is a dataset that you collected before. 

    Returns
    -------
    train_x_arr : list 
        Converted version of the argument 
    '''
    train_x_arr = []
    for index, row in dataframe_single.iterrows():
        for a in row.values:
            train_x_arr.append(ast.literal_eval(a))

    return train_x_arr


def build_freqs(train_x, train_y):
    '''
    Parameters
    ----------
    train_x : list
        list of your X 
    train_y : list 
        List of your Y 
    Returns
    -------
    freqs : dict 
        it returns dictionary that includes key and values like below; 
        (word, label) : number of times appeared 
    '''

    yslist = np.squeeze(train_y).tolist()

    freqs = {}
    for y, tweet in zip(yslist, train_x):
        for word in tweet:
            pair = (word, y)
            if pair in freqs:
                freqs[pair] += 1
            else:
                freqs[pair] = 1

    return freqs


# --------------------------------
# Naive Bayes Functions 

def count_tweets(tweets, ys):
    '''
    Input:
        tweets: a list of tweets
        ys: a list corresponding to the sentiment of each tweet (either 0 or 1)
    Output:
        result: a dictionary mapping each pair to its frequency
    '''
    result = dict()

    for y, tweet in zip(ys, tweets):
        for word in tweet:

            pair = (word, y)
            # if the key exists in the dictionary, increment the count
            if pair in result:
                result[pair] += 1
            # else, if the key is new, add it to the dictionary and set the count to 1
            else:
                result[pair] = 1

    return result


def lookup(freqs, word, label):
    '''
    Parameters
    ----------
    freqs : dictionary that's generated by count_tweets funct   
      
    word : string 
       one of the words in the tweet 
    label : float 
        tweet's class 

    Returns
    -------
    n : integer 
        value that is corresponding to the key (word, label)

    '''
    n = 0  # freqs.get((word, label), 0)

    pair = (word, label)
    if (pair in freqs):
        n = freqs[pair]

    return n
